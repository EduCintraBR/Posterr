// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Posterr.Repository;

#nullable disable

namespace Posterr.Repository.Migrations
{
    [DbContext(typeof(AppDataContext))]
    partial class AppDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Posterr.Domain.Entities.Content", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<int>("Action")
                        .HasColumnType("int")
                        .HasColumnName("action")
                        .HasColumnOrder(2);

                    b.Property<Guid>("ContentPostID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_content_post")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user_action")
                        .HasColumnOrder(3);

                    b.HasKey("Identifier");

                    b.HasIndex("ContentPostID");

                    b.HasIndex("Date");

                    b.HasIndex("UserID");

                    b.ToTable("reg_content", (string)null);
                });

            modelBuilder.Entity("Posterr.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(777)
                        .HasColumnType("nvarchar(777)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("RepostCount")
                        .HasColumnType("int")
                        .HasColumnName("reposts");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user_owner");

                    b.HasKey("Identifier");

                    b.HasIndex("UserID");

                    b.ToTable("reg_post", (string)null);
                });

            modelBuilder.Entity("Posterr.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Identifier");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("reg_user", (string)null);

                    b.HasData(
                        new
                        {
                            Identifier = new Guid("13869682-3a4f-4d34-ac0a-821dbd9867c1"),
                            Name = "Test User 1",
                            Username = "test1"
                        },
                        new
                        {
                            Identifier = new Guid("86523495-0580-4ad6-866c-25c271ab80f7"),
                            Name = "Test User 2",
                            Username = "test2"
                        },
                        new
                        {
                            Identifier = new Guid("fd2e07f1-d191-40f0-97e2-59916b001caf"),
                            Name = "Test User 3",
                            Username = "test3"
                        },
                        new
                        {
                            Identifier = new Guid("b8dd8c55-f6e5-42df-9f13-e728572cc3b7"),
                            Name = "Test User 4",
                            Username = "test4"
                        },
                        new
                        {
                            Identifier = new Guid("1d0ea5e7-f5a5-4fbf-a0b0-bede997ece85"),
                            Name = "Test User 5",
                            Username = "test5"
                        });
                });

            modelBuilder.Entity("Posterr.Domain.Entities.Content", b =>
                {
                    b.HasOne("Posterr.Domain.Entities.Post", "ContentPost")
                        .WithMany()
                        .HasForeignKey("ContentPostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Posterr.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Posterr.Domain.Entities.Post", b =>
                {
                    b.HasOne("Posterr.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
